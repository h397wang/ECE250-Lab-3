/****************************************************
 * Executable:  Trie_driver
 * Author:  Douglas Wilhelm Harder
 * Copyright (c) 2014 by Douglas Wilhelm Harder.  All rights reserved.
 *
 * DO NOT EDIT THIS FILE
 *
 * Create an instance of the Trie_tester<int>
 * or Trie_tester<double> classes and call
 * the member function run().
 *
 * The member function run() will interpret the
 * input appropriately and exit when the interpreter
 * receives either the command 'exit' or and
 * end-of-file.
 ****************************************************/

#include <iostream>
#include <cstring>
#include "Trie_tester.h"

#define MINE 0

int main( int argc, char *argv[] ) {
	
	if (MINE){
		
		Trie t = Trie();
		cout << "Should be empty" << t.empty() << endl;
		
		string s1 = "invalidstring69";
		
		try{
			cout << "Check member() " << t.member(s1) << endl; 
		}catch (illegal_argument e){
			cout << "Exception caught" << endl;
		}
		
		cout << "Test insertion" << endl;
		
		string s2 = "Validstring";
		cout << s2 << " Inserted " << t.insert(s2) << endl;
		string s3 = "Valid";
		cout << s3 << " Inserted " << t.insert(s3) << endl;
		cout << "Size " << t.size() << endl;
		cout << s3 << " Insert should fail " << t.insert(s3) << endl;
		cout << "Check member s3 should be true " << t.member(s3) << endl;
		string s4 = "notin";
		cout << "Try erasing something not in it " << t.erase(s4) << endl;
		cout << "Erase s3 " << t.erase(s3) << endl;
		cout << "s3 should be gone, so 0 " << t.member(s3) << endl;
		cout << "Test clear " << endl;
		t.clear();
		cout << "Cleared everything, should be empty " << t.empty() << endl;
		
	}else{
	
		
		std::cout << "Starting Test Run" << std::endl;
	
		Trie_tester tester;
	
		tester.run();
	
		std::cout << "Finishing Test Run" << std::endl;
		
	}
	
	return 0;
}

